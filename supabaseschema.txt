create table public.artists (
  id serial not null,
  name text not null,
  slug text null,
  constraint artists_pkey primary key (id),
  constraint artists_name_key unique (name),
  constraint artists_slug_key unique (slug)
) TABLESPACE pg_default;

create index IF not exists idx_artists_name on public.artists using btree (name) TABLESPACE pg_default;

create index IF not exists idx_artists_name_ilike on public.artists using gin (name gin_trgm_ops) TABLESPACE pg_default;

create table public.categories (
  id serial not null,
  name text not null,
  slug text null,
  constraint categories_pkey primary key (id),
  constraint categories_name_key unique (name),
  constraint categories_slug_key unique (slug)
) TABLESPACE pg_default;

create index IF not exists idx_categories_name on public.categories using btree (name) TABLESPACE pg_default;

create index IF not exists idx_categories_name_ilike on public.categories using gin (name gin_trgm_ops) TABLESPACE pg_default;

create table public.characters (
  id uuid not null default gen_random_uuid (),
  name text not null,
  slug text not null,
  constraint characters_pkey primary key (id),
  constraint characters_name_key unique (name),
  constraint characters_slug_key unique (slug)
) TABLESPACE pg_default;

create index IF not exists idx_characters_name on public.characters using btree (name) TABLESPACE pg_default;

create index IF not exists idx_characters_name_ilike on public.characters using gin (name gin_trgm_ops) TABLESPACE pg_default;

create table public.groups (
  id serial not null,
  name text not null,
  slug text null,
  constraint groups_pkey primary key (id),
  constraint groups_name_key unique (name),
  constraint groups_slug_key unique (slug)
) TABLESPACE pg_default;

create index IF not exists idx_groups_name on public.groups using btree (name) TABLESPACE pg_default;

create index IF not exists idx_groups_name_ilike on public.groups using gin (name gin_trgm_ops) TABLESPACE pg_default;

create table public.languages (
  id serial not null,
  name text not null,
  slug text null,
  constraint languages_pkey primary key (id),
  constraint languages_name_key unique (name),
  constraint languages_slug_key unique (slug)
) TABLESPACE pg_default;

create index IF not exists idx_languages_name on public.languages using btree (name) TABLESPACE pg_default;

create index IF not exists idx_languages_name_ilike on public.languages using gin (name gin_trgm_ops) TABLESPACE pg_default;

create table public.languages (
  id serial not null,
  name text not null,
  slug text null,
  constraint languages_pkey primary key (id),
  constraint languages_name_key unique (name),
  constraint languages_slug_key unique (slug)
) TABLESPACE pg_default;

create index IF not exists idx_languages_name on public.languages using btree (name) TABLESPACE pg_default;

create index IF not exists idx_languages_name_ilike on public.languages using gin (name gin_trgm_ops) TABLESPACE pg_default;

create table public.languages (
  id serial not null,
  name text not null,
  slug text null,
  constraint languages_pkey primary key (id),
  constraint languages_name_key unique (name),
  constraint languages_slug_key unique (slug)
) TABLESPACE pg_default;

create index IF not exists idx_languages_name on public.languages using btree (name) TABLESPACE pg_default;

create index IF not exists idx_languages_name_ilike on public.languages using gin (name gin_trgm_ops) TABLESPACE pg_default;

create table public.manga_categories (
  manga_id uuid not null,
  category_id integer not null,
  constraint manga_categories_pkey primary key (manga_id, category_id),
  constraint manga_categories_category_id_fkey foreign KEY (category_id) references categories (id) on delete CASCADE,
  constraint manga_categories_manga_id_fkey foreign KEY (manga_id) references manga (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_manga_categories_manga_id on public.manga_categories using btree (manga_id) TABLESPACE pg_default;

create index IF not exists idx_manga_categories_category_id on public.manga_categories using btree (category_id) TABLESPACE pg_default;

create table public.manga_categories (
  manga_id uuid not null,
  category_id integer not null,
  constraint manga_categories_pkey primary key (manga_id, category_id),
  constraint manga_categories_category_id_fkey foreign KEY (category_id) references categories (id) on delete CASCADE,
  constraint manga_categories_manga_id_fkey foreign KEY (manga_id) references manga (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_manga_categories_manga_id on public.manga_categories using btree (manga_id) TABLESPACE pg_default;

create index IF not exists idx_manga_categories_category_id on public.manga_categories using btree (category_id) TABLESPACE pg_default;

create table public.manga_categories (
  manga_id uuid not null,
  category_id integer not null,
  constraint manga_categories_pkey primary key (manga_id, category_id),
  constraint manga_categories_category_id_fkey foreign KEY (category_id) references categories (id) on delete CASCADE,
  constraint manga_categories_manga_id_fkey foreign KEY (manga_id) references manga (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_manga_categories_manga_id on public.manga_categories using btree (manga_id) TABLESPACE pg_default;

create index IF not exists idx_manga_categories_category_id on public.manga_categories using btree (category_id) TABLESPACE pg_default;

create table public.manga_languages (
  manga_id uuid not null,
  language_id integer not null,
  constraint manga_languages_pkey primary key (manga_id, language_id),
  constraint manga_languages_language_id_fkey foreign KEY (language_id) references languages (id) on delete CASCADE,
  constraint manga_languages_manga_id_fkey foreign KEY (manga_id) references manga (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_manga_languages_manga_id on public.manga_languages using btree (manga_id) TABLESPACE pg_default;

create index IF not exists idx_manga_languages_language_id on public.manga_languages using btree (language_id) TABLESPACE pg_default;

create table public.manga_parodies (
  manga_id uuid not null,
  parody_id integer not null,
  constraint manga_parodies_pkey primary key (manga_id, parody_id),
  constraint manga_parodies_manga_id_fkey foreign KEY (manga_id) references manga (id) on delete CASCADE,
  constraint manga_parodies_parody_id_fkey foreign KEY (parody_id) references parodies (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_manga_parodies_manga_id on public.manga_parodies using btree (manga_id) TABLESPACE pg_default;

create index IF not exists idx_manga_parodies_parody_id on public.manga_parodies using btree (parody_id) TABLESPACE pg_default;

create table public.manga_tags (
  manga_id uuid not null,
  tag_id integer not null,
  constraint manga_tags_pkey primary key (manga_id, tag_id),
  constraint manga_tags_manga_id_fkey foreign KEY (manga_id) references manga (id) on delete CASCADE,
  constraint manga_tags_tag_id_fkey foreign KEY (tag_id) references tags (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_manga_tags_manga_id on public.manga_tags using btree (manga_id) TABLESPACE pg_default;

create index IF not exists idx_manga_tags_tag_id on public.manga_tags using btree (tag_id) TABLESPACE pg_default;

create table public.pages (
  id uuid not null default gen_random_uuid (),
  manga_id uuid null,
  page_number integer not null,
  image_url text not null,
  constraint pages_pkey primary key (id),
  constraint pages_manga_id_fkey foreign KEY (manga_id) references manga (id) on delete CASCADE
) TABLESPACE pg_default;

create table public.pages (
  id uuid not null default gen_random_uuid (),
  manga_id uuid null,
  page_number integer not null,
  image_url text not null,
  constraint pages_pkey primary key (id),
  constraint pages_manga_id_fkey foreign KEY (manga_id) references manga (id) on delete CASCADE
) TABLESPACE pg_default;

create table public.pages (
  id uuid not null default gen_random_uuid (),
  manga_id uuid null,
  page_number integer not null,
  image_url text not null,
  constraint pages_pkey primary key (id),
  constraint pages_manga_id_fkey foreign KEY (manga_id) references manga (id) on delete CASCADE
) TABLESPACE pg_default;

create table public.tags (
  id serial not null,
  name text not null,
  slug text null,
  constraint tags_pkey primary key (id),
  constraint tags_name_key unique (name),
  constraint tags_slug_key unique (slug)
) TABLESPACE pg_default;

create index IF not exists idx_tags_name on public.tags using btree (name) TABLESPACE pg_default;

create index IF not exists idx_tags_name_ilike on public.tags using gin (name gin_trgm_ops) TABLESPACE pg_default;